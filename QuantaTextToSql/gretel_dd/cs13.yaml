model_suite: apache-2.0

special_system_instructions: >-
  You are an SQL expert. Your role is to write SQL prompts, SELECT statements, and CREATE TABLE statements.

categorical_seed_columns:
  - name: topic
    values:
      - sales
      - customers
      - products
      - orders
      - employees
      - inventory
      - suppliers
      - finance
      - marketing
      - human_resources

  - name: instruction_phrase
    values:
      - "Construct an SQL query to"
      - "Retrieve the"
      - "List the"
      - "Show me the"
      - "Fetch the"
      - "Display the"
      - "Extract the"
      - "Find the"
      - "Provide the"
      - "Get the"
      - "Select the"
    num_new_values_to_generate: 15

generated_data_columns:
  - name: table_name
    generation_prompt: >-
      Generate a realistic SQL table name relevant to the topic '{topic}'. The table name should be in snake_case, descriptive yet concise, and should not include any additional text or formatting.

    columns_to_list_in_prompt: [topic]

  - name: column_names
    generation_prompt: >-
      Generate a list of 1 to 6 realistic SQL column names for the table '{table_name}' in the context of topic '{topic}'. Each column name should be in snake_case, relevant to the table's content, and should not include any additional text or formatting.

    columns_to_list_in_prompt: [table_name, topic]

  - name: selected_columns
    generation_prompt: >-
      From the list of column names '{column_names}', randomly select 1 to 3 columns to include in the SQL query.

    columns_to_list_in_prompt: [column_names]

  - name: prompt_column_names
    generation_prompt: >-
      For each column in '{selected_columns}', generate a semantically similar but not exactly matching name to be used in the SQL prompt (e.g., 'customer ID' for 'customer_id'). Do not include any additional text or formatting.

    columns_to_list_in_prompt: [selected_columns]

  - name: column_data_types
    generation_prompt: >-
      Suggest appropriate SQL numeric data types (e.g., INT, FLOAT, DECIMAL) for each column in '{column_names}'. Provide a list matching each column to its data type. Do not include any additional text or formatting.

    columns_to_list_in_prompt: [column_names]

  - name: sql_prompt
    generation_prompt: >-
      Generate a clear and specific natural language instruction for a SQL query to select '{prompt_column_names}' from '{table_name}'. The instruction should begin with the phrase '{instruction_phrase}'.

      Important Guidelines:
        * Use the prompt column names that do not match exactly with the actual column names.
        * The instruction should be clear and concise.
        * Do not include any additional text or formatting.

    columns_to_list_in_prompt: [instruction_phrase, prompt_column_names, table_name]

  - name: sql_context
    generation_prompt: >-
      Generate the SQL CREATE TABLE statement for a table named '{table_name}' that includes the columns '{column_names}' with data types '{column_data_types}'. The statement should be executable, syntactically correct, and should not include any additional text or formatting.

      Important Guidelines:
        * Include 1 to 6 columns in the table.
        * Ensure the SQL is executable and syntactically correct.
        * Do not include any additional text or formatting.

    columns_to_list_in_prompt: [table_name, column_names, column_data_types]
    llm_type: code

  - name: sql
    generation_prompt: >-
      Write the SQL query that selects '{selected_columns}' from '{table_name}' as per the instruction '{sql_prompt}'. Map the prompt column names to the actual column names in the table.

      Important Guidelines:
        * Ensure the SQL query correctly maps the non-exact matching prompt column names to the actual column names.
        * The query should select 1 to 3 columns.
        * Do not include any additional text or formatting.

    columns_to_list_in_prompt: [sql_prompt, selected_columns, table_name]
    llm_type: code

post_processors:
  - validator: code
    settings:
      code_lang: ansi
      code_columns: [sql_context, sql]

  - evaluator: text_to_sql
    settings:
      text_column: sql_prompt
      code_column: sql
      context_column: sql_context
